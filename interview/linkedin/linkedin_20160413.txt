- project & behavior
- coding, machine learning

http://collabedit.com/js3w8

(A(B(C)(D))(E)(F))

               A
             / | \
            B  E  F
           / \
          C   D

class TreeNode {
    char c;
    List<TreeNode> children;
    public TreeNode(char c) {
        this.c = c;
        this.children = new ArrayList<>();
    }
    public void add(TreeNode node) {
        children.add(node);
    }
}

public TreeNode build(String str) {
     if (str == null) {
         return null;
     }
     
     Stack<TreeNode> stack = new Stack<>();
     TreeNode root = null;
     
     for(int i = 0; i < str.length(); i++) {
         char cur = s.charAt(i);
         if (cur == '(') {
                char next = s.charAt(++i);
                TreeNode newNode = new TreeNode(next);
                if (stack.isEmpty()) {
                    root = newNode;
                } else {
                    TreeNode node = stack.peek();
                    node.add(newNode);
                }             
                stack.push(newNode);
         } else {
                stack.pop();
         }
     }
     return root;
}

// Write a function that, given a list of integers (both positive and negative) returns the sum of the contiguous subsequence with maximum sum. Thus, given the sequence (1, 2, -4, 1, 3, -2, 3, -1) it should return 5.


public int maxSum(int[] arr) {
    if (arr == null || arr.length == 0) {
        return Integer.MIN_VALUE;
    }

    int end = 0;
    int sum = 0;
    int max = Integer.MIN_VALUE;    

    while(end < arr.length) {
        sum += arr[end++];
        max = Math.max(sum, max);
        if (sum <= 0) {
            sum = 0;
        }
    }
    
    return max;
}


public int maxProduct(int[] arr) {
    if (arr == null || arr.length == 0) {
        return Integer.MIN_VALUE;
    }    

    int pos = 0;
    int neg = 0;

    for(int i = 0; i < arr.length; i++) {
        int val = arr[i];
        if (val == 0) {
            pos[i] = 0;
            neg[i] = 0;
        } else if (val > 0) {
            pos[i] = pos[i-1]*val;
            neg[i] = neg[i-1]*val;
        } else {
            pos[i] = neg[i-1]*val;
            neg[i] = pos[i-1]*val;
        }
    }
}

}


